import { CellContext, HeaderContext, Row } from "@tanstack/react-table";
import { FilterType } from "./filter-types";

export interface UserInterface {
  is_admin: boolean;
  role: "admin" | "employee" | "client";
  profile_complete: boolean;
  must_change_password: boolean;
}

export interface LoginResponseInterface {
  token: string;
  user: UserInterface;
}

export interface UserBasicInfo {
  full_name: string;
  email: string;
  profile_picture_url: string;
  position: string;
}

export interface EmployeeInterface {
  id: number;
  user_id: number;
  full_name: string;
  first_name: string;
  middle_name?: string;
  last_name: string;
  position: string;
  email: string;
  status: string;
  has_ongoing_task?: boolean;
  profile_picture_url?: string;
}

export interface ClientInterface {
  id: number;
  user_id: number;
  full_name: string;
  first_name: string;
  middle_name?: string;
  last_name: string;
  email: string;
  status: string;
  profile_picture_url?: string;
}

//team details response
export interface Manager {
  id: number;
  name: string;
  role: "Project Manager" | "Vice Manager";
}

export interface TeamDetailsResponse {
  managers: Manager[];
  activated_accounts: EmployeeInterface[];
  other_employees: EmployeeInterface[];
}

export interface ProjectListResponseInterface {
  id: string;
  client_name: string;
  project_title: string;
  start_date: string;
  end_date: string;
  finish_date?: string | null;
  status:
    | "finished"
    | "on-hold"
    | "ongoing"
    | "cancelled"
    | "archived"
    | "pending";
  location: string;
  image_url?: string | null;
  project_manager: string;
  user_role?: string;
}

export interface ProjectDetailsInterface {
  id: string;
  client_id: number;
  client_name: string;
  project_title: string;
  project_description: string;
  start_date: string;
  end_date: string;
  finish_date?: string | undefined | null;
  status: "finished" | "on-hold" | "ongoing" | "cancelled" | "archived";
  street: string;
  city_town: string;
  state: string;
  zip_code: number;
  image_url?: string | undefined | null;
  project_manager: string;
}

export interface ColumnInterface<T> {
  id?: string;
  accessorKey?: keyof T | string;
  header:
    | (() => JSX.Element)
    | (({ table }: HeaderContext<T, unknown>) => JSX.Element);
  meta?: FilterType;
  cell?: ({ row }: CellContext<T, unknown>) => JSX.Element;
  filterFn?: <T>(
    row: Row<T>,
    columnId: string,
    filterValues: string[]
  ) => boolean; // boolean because the system only uses one filter function
}

export interface ColumnInterfaceProp {
  id?: string;
  accessorKey?: string;
  header?: string;
  meta?: FilterType;
  cell?: boolean | JSX.Element;
  filterFn?: boolean; // boolean because the system only uses one filter function
  enableHiding?: boolean;
}

export type AccountActions =
  | "sendReset"
  | "deactivate"
  | "archive"
  | "activate"
  | "unarchive"
  | undefined;

export type ProjectActions =
  | "archive"
  //| "unarchive"
  | "cancel"
  | "remove"
  | "onhold"
  | "continue"
  | undefined;

export interface Breadcrumbs {
  href: string;
  pageName: string;
  active: boolean;
}

export interface ProjectSelector {
  projectId: string;
  projectName: string;
}

//tasks
export const ItemTypes = {
  TASK: "task" as const, // 'as const' ensures literal type inference
};

export interface TaskVersion {
  id: number;
  version: number;
  start_data: string;
  finish_date: string;
  task_files_count: number;
  remaining_duration: number;
  created_at: string;
  updated_at: string;
}

export interface TeamMember {
  full_name: string;
  profile_picture_url: string;
}

export const TASK_STATUSES = [
  "to do",
  "in progress",
  "cancelled",
  "paused",
  "needs review",
  "done",
] as const;

export type TaskStatuses = (typeof TASK_STATUSES)[number];

export interface TaskItem {
  id: number;
  phase_category: string;
  task_name: string;
  task_description: string;
  status: TaskStatuses;
  total_duration: number;
  assigned_team_members: TeamMember[];
  task_comments_count: number;
  versions: TaskVersion[];
}

export interface TaskItemProps extends TaskItem {
  phaseColor: {
    light: string;
    dark: string;
  };
}

export interface Tasks {
  tasks: TaskItem[];
}

export interface TeamMemberDashboard {
  teammember_id: number;
  employee_id: number;
  user_id: number;
  full_name: string;
  email: string;
  phone_number: string;
  role: string;
  task_counts: {
    "to do": number;
    "in progress": number;
    "needs review": number;
    paused: number;
    done: number;
    cancelled: number;
  };
  profile_picture_url?: string;
  has_task: boolean;
}

export interface TeamMemberDashboardResponse {
  team_members: TeamMemberDashboard[];
}

export interface ViceManagerPermissionResponse {
  vice_manager_permission?: boolean;
}

// Interface for a single phase
export interface Phase {
  id: string; // Optional since it's generated by the database
  category: string; // Required field from validation
  created_at?: Date;
  finish_date?: Date;
  project_id?: string;
  status?:
    | "to do"
    | "ongoing"
    | "cancelled"
    | "paused"
    | "archived"
    | "finished";
  updated_at?: Date;
}

// Interface for phase input (before creation)
export interface PhaseInput {
  category: string;
}

// Interface for the request data
export interface PhaseRequest {
  phases: PhaseInput[];
}

//types
export type SupportedTableTypes =
  | ClientInterface
  | EmployeeInterface
  | ProjectListResponseInterface;

export type SupportedTableName = "Accounts" | "Projects";
export type AccountsTableType = ClientInterface | EmployeeInterface;

export interface CustomTabsProps {
  activeTab: string | null;
  tabItems: {
    item: string;
    action: () => void;
  }[];
}
